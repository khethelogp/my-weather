{"version":3,"sources":["config.js","Location.js","setIcon.js","DayList.js","DailyFocust.js","TodaysCondition.js","App.js","index.js"],"names":["api","desc","Location","city","country","temp","description","weatherConditions","Thunderstorm","Rain","Drizzle","Snow","Mist","Smoke","Haze","Dust","Fog","Sand","Ash","Squall","Tornado","Hurricane","Clear","Cloud","Clouds","today","Date","currentTime","getHours","getMinutes","className","Math","round","class","setIcon","Daylist","days","map","day","index","d","dt","toLocaleDateString","weekday","slice","weather","main","max","min","DailyFocust","longitude","latitude","longi","lati","useState","setDays","useEffect","get7DayWeather","a","fetch","response","json","data","daily","TodaysCondition","WIND_DIRECTION","humidity","feels","minTemp","maxTemp","condition","windDirection","windSpeed","pressure","sunrise","sunset","getNormalTime","unixTimestamp","date","hours","minutes","getWindDirection","App","setWeather","search","setSearch","query","setQuery","isPending","setIsPending","rError","setRError","setTimeout","getWeather","ok","Error","message","toLowerCase","setBackgroundImg","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","title","name","sys","id","coord","lon","lat","feels_like","temp_min","temp_max","wind","deg","speed","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.56f66fdf.chunk.js","sourcesContent":["const api = {\r\n    key: \"ccc62bdb7a2967c2cfdfa36001161aed\",\r\n    base: \"https://api.openweathermap.org/data/2.5/\"\r\n}\r\n\r\nexport { api } ;","import React from 'react';\r\n\r\nlet desc = \"\";\r\n\r\nconst Location = ({city, country, temp, description}) => {\r\n    const weatherConditions = {\r\n        Thunderstorm: \"cloud-lightning-rain\",\r\n        Rain: \"cloud-rain-heavy\",\r\n        Drizzle: \"cloud-drizzle\",\r\n        Snow: \"cloud-snow\",\r\n        Mist: \"cloud-fog2\",\r\n        Smoke: \"cloud-haze-1\",\r\n        Haze: \"cloud-haze\",\r\n        Dust: \"cloud-haze2-fill\",\r\n        Fog: \"cloud-fog2\",\r\n        Sand: \"tornado\",\r\n        Ash: \"cloud-snow\",\r\n        Squall: \"wind\",\r\n        Tornado: \"tornado\",\r\n        Hurricane: \"hurricane\",\r\n        Clear: \"sun\",\r\n        Cloud: \"cloud\",\r\n        Clouds: \"clouds\",   \r\n    }\r\n\r\n    // Checking if its night or day for Location Icon\r\n    const today = new Date();\r\n    const currentTime = {\r\n        hours: today.getHours(),\r\n        minutes: today.getMinutes() \r\n    }\r\n    \r\n\r\n    switch(description) {\r\n        case \"Thunderstorm\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Rain\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Drizzle\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Snow\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Mist\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Smoke\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Haze\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Dust\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Fog\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Sand\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Ash\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Squall\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Tornado\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Hurricane\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Cloud\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Clouds\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        \r\n        default:\r\n        // currentTime.hours > 18 ? desc = \"moon\" : desc = \"sun\"; \r\n        if (currentTime.hours > 18 ) {\r\n            desc = \"moon\" }else { desc = \"sun\";}\r\n        if (currentTime.hours < 6) {\r\n            desc = \"moon\";\r\n        }\r\n            \r\n    } \r\n    \r\n\r\n\r\n    return (  \r\n        <div className=\"location\">\r\n                <div className=\"data\">\r\n                    <h1>{city}, {country}</h1>\r\n                    <h3>Current</h3>\r\n                    <h2>{Math.round(temp)}Â°C</h2>\r\n                    <h4>{description}</h4>\r\n                </div>\r\n                <div className=\"data-icon\">\r\n                    <i class={`bi bi-${desc}`}></i>\r\n                </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Location;","function setIcon(description){\r\n\r\n    let desc = \"\";\r\n\r\n    const weatherConditions = {\r\n        Thunderstorm: \"cloud-lightning-rain\",\r\n        Rain: \"cloud-rain-heavy\",\r\n        Drizzle: \"cloud-drizzle\",\r\n        Snow: \"cloud-snow\",\r\n        Mist: \"cloud-fog2\",\r\n        Smoke: \"cloud-haze-1\",\r\n        Haze: \"cloud-haze\",\r\n        Dust: \"cloud-haze2-fill\",\r\n        Fog: \"cloud-fog2\",\r\n        Sand: \"tornado\",\r\n        Ash: \"cloud-snow\",\r\n        Squall: \"wind\",\r\n        Tornado: \"tornado\",\r\n        Hurricane: \"hurricane\",\r\n        Clear: \"sun\",\r\n        Cloud: \"cloud\",\r\n        Clouds: \"clouds\",   \r\n    }\r\n\r\n     // Checking if its night or day for Location Icon\r\n    /* \r\n    const today = new Date();\r\n    const currentTime = {\r\n        hours: today.getHours(),\r\n        minutes: today.getMinutes() \r\n    } */\r\n\r\n    switch(description) {\r\n        case \"Thunderstorm\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Rain\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Drizzle\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Snow\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Mist\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Smoke\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Haze\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Dust\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Fog\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Sand\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Ash\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Squall\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Tornado\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Hurricane\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Cloud\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        case \"Clouds\":\r\n            desc = weatherConditions[description];\r\n        break;\r\n        \r\n        default:\r\n        \r\n        desc = \"sun\";\r\n    }\r\n    \r\n    return desc;\r\n    \r\n}\r\n\r\nexport {setIcon};","import { setIcon } from \"./setIcon\";\r\n\r\nconst Daylist = ({ days }) => {\r\n\r\n    function setDay(d) {\r\n        var dayname = new Date(d.dt * 1000).toLocaleDateString(\"en\", {\r\n            weekday: \"long\",\r\n        });\r\n\r\n        return dayname.slice(0,3);\r\n    }\r\n \r\n\r\n    return ( \r\n        <div className=\"day-list\">\r\n            {days.map((day,index) => (\r\n                    <div className=\"day\" key={index}>\r\n                    <h3>{setDay(day)}</h3>\r\n                    <i className={`bi bi-${setIcon(day.weather[0].main)}`}></i>\r\n                    <p>{Math.round(day.temp.max)}Â° <small>{Math.round(day.temp.min)}Â°</small></p>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Daylist;","import React, { useState, useEffect } from 'react';\r\nimport { api } from './config';\r\nimport Daylist from './DayList';\r\n\r\n\r\nconst DailyFocust = ({ longitude, latitude }) => {\r\n    \r\n    const longi = longitude;\r\n    const lati = latitude;\r\n    \r\n    const [days, setDays] = useState(null);\r\n    \r\n    useEffect(()=>{\r\n        // console.log('Got the data ');\r\n        get7DayWeather();\r\n    },[longi]);\r\n\r\n    // fetching 7 day weather \r\n    const get7DayWeather = async () => {\r\n        const response = await \r\n        fetch(`${api.base}onecall?lat=${lati}&lon=${longi}&exclude=current,hourly,minutely,alerts&units=metric&appid=${api.key}`)\r\n        const data = await response.json();\r\n        setDays(data.daily);\r\n    };\r\n\r\n    return ( \r\n            <div className=\"daily-focust\">\r\n                {days && <Daylist days={days}/>}\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default DailyFocust;","import React from 'react';\r\n\r\nconst TodaysCondition = ({ humidity, feels, minTemp, maxTemp, condition, windDirection, windSpeed, pressure, sunrise, sunset}) => {\r\n\r\n    // Converting javascript timestamps to normal time\r\n    function getNormalTime(unixTimestamp){\r\n        let date = new Date(unixTimestamp * 1000);\r\n        let hours = (\"0\" + date.getHours()).slice(-2);\r\n        let minutes = (\"0\" + date.getMinutes()).slice(-2); \r\n        let time = `${hours}:${minutes}`;\r\n        return time;\r\n    }\r\n\r\n    // Wind direction function\r\n    let WIND_DIRECTION;\r\n\r\n    function getWindDirection(d){\r\n        switch (true) {\r\n            case 0 :\r\n            case 360:\r\n                WIND_DIRECTION = \"N\";\r\n            break;\r\n            case 90 :\r\n                WIND_DIRECTION = \"E\";\r\n            break;\r\n            case 180 :\r\n                WIND_DIRECTION = \"S\";\r\n            break;\r\n            case 270 :\r\n                WIND_DIRECTION = \"W\";\r\n            break;\r\n            case (d>0 && d<90) :\r\n                WIND_DIRECTION = \"NE\";\r\n            break;\r\n            case (d>90 && d<180) :\r\n                WIND_DIRECTION = \"SE\";\r\n            break;\r\n            case (d>180 && d<270) :\r\n                WIND_DIRECTION = \"SW\";\r\n            break;\r\n            case (d>270 && d<360) :\r\n                WIND_DIRECTION = \"NW\";\r\n            break;\r\n            default:\r\n                WIND_DIRECTION = \"-\";\r\n                break;\r\n        }\r\n\r\n        return WIND_DIRECTION;\r\n    }\r\n\r\n    return ( \r\n        <div className=\"todays-condition\">\r\n            <h2>Today's Weather Condition</h2>\r\n            <div className=\"condition\">\r\n                <h4>Humidity</h4>\r\n                <h4>{humidity}%</h4>\r\n            </div>\r\n            <div className=\"condition\">\r\n                <h4>Feels Like</h4>\r\n                <h4>{Math.round(feels)}Â°C</h4>\r\n            </div>\r\n            <div className=\"condition\">\r\n                <h4>Min Temp</h4>\r\n                <h4>{Math.round(minTemp)}Â°C</h4>\r\n            </div>\r\n            <div className=\"condition\">\r\n                <h4>Max Temp</h4>\r\n                <h4>{Math.round(maxTemp)}Â°C</h4>\r\n            </div>\r\n            <div className=\"condition\">\r\n                <h4>Condition</h4>\r\n                <h4>{condition}</h4>\r\n            </div>\r\n            <div className=\"condition\">\r\n                <h4>Wind Direction</h4>\r\n                <h4>{getWindDirection(windDirection)}</h4>\r\n            </div>\r\n                <div className=\"condition\">\r\n                <h4>Wind Speed</h4>\r\n                <h4>{Math.round(windSpeed)} km/h</h4>\r\n            </div>\r\n            <div className=\"condition\">\r\n                <h4>Pressure</h4>\r\n                <h4>{pressure}</h4>\r\n            </div>\r\n            <div className=\"condition\">\r\n                <h4>Sunrise</h4>\r\n                <h4>{getNormalTime(sunrise)}</h4>\r\n            </div>\r\n            <div className=\"condition\">\r\n                <h4>Sunset</h4>\r\n                <h4>{getNormalTime(sunset)}</h4>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\nexport default TodaysCondition;","import React, { useState, useEffect } from 'react';\nimport { api } from './config'\n\nimport Location from './Location';\nimport DailyFocust from './DailyFocust';\nimport TodaysCondition from './TodaysCondition';\n\n\nconst App = () => {\n  const [weather, setWeather] = useState({});\n  const [search, setSearch] = useState('');\n  const [query, setQuery] = useState('Pretoria');\n  const [isPending, setIsPending] = useState(true); \n  const [rError, setRError] = useState(null);\n\n  useEffect(()=>{\n    setTimeout(() => {\n      getWeather();\n    },1000);\n\n  },[query]);\n\n  // fetching daily weather \n  const getWeather = async () => {\n    try {\n      const response = await \n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)      \n      if(!response.ok) {\n        throw Error('Oops, could not fetch the data for that resource!');  \n      }else{\n        const data = await response.json();\n        setWeather(data);  \n        setIsPending(false);\n        setRError(null);\n      }\n    } catch (error) {\n      setIsPending(false);\n      setRError(error.message);\n    }\n  };\n\n  //fetch 7 days weather\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n    setIsPending(true);\n  }\n  \n  /* Setting the background Image of the app */\n  function setBackgroundImg(){\n    let desc = \"\";\n    if(weather.main){\n      desc = (weather.weather[0].main).toLowerCase();\n    }\n    return desc;\n  }\n  \n\n  return (\n    <div className={`app ${setBackgroundImg()}`}>\n      <main>\n        <div className=\"container\">\n            <div className=\"grid-wrapper\">\n\n                <div className=\"searchBar\">\n                  <form className=\"search-form\"\n                    onSubmit={getSearch}>\n                      <input \n                        className=\"search-bar\" \n                        type=\"text\" \n                        placeholder=\"Enter a Town or City\"\n                        value={search}\n                        onChange={updateSearch}\n                      />\n              \n                      <button type=\"submit\" title=\"search\">\n                        <i class=\"bi bi-search\"></i>\n                      </button>   \n                  </form>\n                </div>\n\n                {rError && <div className=\"rError\">{ rError } </div> }\n\n                {isPending && <div className=\"pending\"><h3>Loading...</h3></div>}\n                \n                {weather.main && <Location \n                    key={weather.weather.id}\n                    city={weather.name}\n                    country={weather.sys.country}\n                    temp={weather.main.temp}\n                    description={weather.weather[0].main}\n                />}\n                \n                {weather.main && <DailyFocust \n                    key={weather.weather.id}\n                    longitude={weather.coord.lon}\n                    latitude={weather.coord.lat}\n                />}\n              \n              {weather.main && <TodaysCondition \n                    key={weather.weather.id}\n                    humidity={weather.main.humidity}\n                    feels={weather.main.feels_like}\n                    minTemp={weather.main.temp_min}\n                    maxTemp={weather.main.temp_max}\n                    condition={weather.weather[0].description}\n                    windDirection={weather.wind.deg}\n                    windSpeed={weather.wind.speed} \n                    pressure={weather.main.pressure}\n                    sunrise={weather.sys.sunrise}\n                    sunset={weather.sys.sunset}\n              />}\n\n            </div>  \n        </div>\n      </main>    \n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}